C/++

statické jazyky
efektivně namapované na strojové instrukce
dobré pro velké věci i malé čipy
explicitní management dynamické paměti

#include SE CELÉ NAHRADÍ obsahem té knihovny

ZÁPIS
CELÝCH ČÍSEL
decimální
- jsou znaménková, píšu normálně
hexadecimální
- předpona 0x
binární
- předpona 0b
osmičková
- předpona prostě 0
FLOATŮ - normálně
BOOLEAN - true, false
STRINGŮ - v uvozovkách
CHARŮ - v apostrofech, pokud je v jiném typu než char, tak je to int

ESCAPE SEKVENCE
\n LF
\r CR
\t TAB - nejbližší násobek 8
\\ jedno zpětné lomítko
\' apostrof
\" uvozovka
\xab char hodnoty 0xab - na divnoznaky

TYPY PROMĚNNÝCH
základní
- char dnes 8-bitů, na unicody jiné typy 
- int znaménkové ARDUINO MÁ INT 16BIT, RECODEX 32BIT
modifikátory
- short (libovolný číselný typ, počet bitů <= int) 16/ard 16
- long (>= int) 64/ard 32
- long long (>= long) 64/ard 64
- můžu si vynutit int32_t
- signed, unsigned
floatové
- float, double, long double 7-5-4
další
- void, bool (v C _Bool)
velikostní
- size_t - dle počítače, na mém 64bitů, podle paměťového prostoru

IMPLICITNÍ KONVERZE TYPU
- menší přiřazuju do většího - v pohodě
- větší do menšího - varování, potenciální ztráta dat
- při operacích je výsledek ten větší z těch dvou, operace se v něm i provádí
EXPLICITNÍ KONVERZE TYPU, CAST
double d;
float f = (float)d;

PROMĚNNÁ
= pojmenovaná hodnota v paměti
- deklarace, inicializace (jinak náhodný obsah)
- typ auto
- životnost, viditelnost

ŽIVOTNOST
lokální
- existuje pouze v bloku {}
globální
- libovolná proměnná deklarovaná mimo tělo fce
- žije po celou dobu programu
- zavoláno už před main
- automaticky inicializovaná na nulu

VIDITELNOST
- globální i lokální až od okamžiku inicializace
- nevidím si navzájem do bloků
statické
- static int je lokální s globální životností
- při opakovaném volání funkce se hodnota zachovává

________________________________________________________________________________
PŘÍKAZY V C A C++
ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ
- celý blok {} se chápe jako jeden příkaz

IF
- pokud je hodnota různá od nuly
- v () může být cokoli porovnatelné s nulou

SWITCH
switch (expr pouze int nebo výčet) {
case 0:
    //sth
    break;
case 1:
case 2:
    //spolecny kod pro case 1 a 2
    break;
default:    //když není, neudělá se nic
    break;
}

WHILE
- jako u ifu, dokud různé od nuly, porovnání před prvním provedením

DO WHILE
- porovnání až po provedení

FOR
- (inicializace; test; inkrementace - může být libovolný výraz)

GOTO
- na návěstí, když potřebuju udělat break přes víc úrovní
- NEMŮŽU SKÁKAT MEZI FUNKCEMI
- není rozumné skákat dovnitř o jiného bloku

________________________________________________________________________________
OPARÁTORY A VÝRAZY
^^^^^^^^^^^^^^^^^^
aritmetické
  +,=,*,/,%
  ++,--
        !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        !!!!   i = 5;                        !!!!
        !!!!   j = ++i; --> i = 6; j = 6;    !!!!
        !!!!   j = i++; --> i = 6; j = 5;    !!!!
        !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  
porovnávací
  <, <=, >=, >, ==, !=
bitové
  ~ ALTGR+1 negace
  & ALTGR+C and
  | ALTGR+W or
  ^ ALTGR+3 xor
  <<, >>    u znaménkového se kopíruje nejvyšší bit
logické
  &&, ||, !
ukazatele
  &, *
přiřazení
  =, +=, -=, *=, /=, %=, &=, |=, ^=   
  je to pořád výraz - můžu řetězit, if (i=5) platí, pokud i !=0
velikostní
  sizeof v bytech
  szeof(int)
  sizepf(i+4) - spočítá se jen typ, ne výraz
TERNÁRNÍ VÝRAZ
- test ? e1 : e2

________________________________________________________________________________
POLE
^^^^
- nikdo nekontroluje, jestli jsme nesáhli vedle
- inicializace jen části: int pole[1000]={1,2,3,};
- u vícerozměrných uožení po řádcích

STRING
^^^^^^
- pole charů automaticky zakončené '\0' nulou
- char str[] = "Hippo";
- TOHLE NENÍ STRING char chars[] = {'H', 'i', 'p', 'p', 'o'};
________________________________________________________________________________
ZAROVNÁNÍ PAMĚTI
^^^^^^^^^^^^^^^^
- char kdekoli, int na násobcích 4 etc.
________________________________________________________________________________
STRUKTURA
^^^^^^^^^
- struct point2d {
    int x, y;
  };
- je tam uvnitř padding kvůli zarovnání paměti
- padding zvenku na zarovnání podle velikosti největšího datového typu
- přehazovat se nemůže
- struct data {
    cahr c;
    double d;
    int i;
  };
  c-------
  dddddddd
  iiii----
________________________________________________________________________________

KOSTANTY
^^^^^^^^
const int the_answer = 42; - má místo v paměti, dá se z toho vzít adresa
cosntexpr int the_answer = 42; - neexistuje v paměti
#define THE_ANSWER 42 - dělalo se dřív, textově se nahradí ještě před překladem
________________________________________________________________________________

VÝČTOVÉ TYPY
^^^^^^^^^^^^
enum state_t{ něco1, něco2, něco3 }; - céčkové, dostane to int hodnoty

class enum state_t{ něco1, něco2, něco3 }; - c++kové
state_t s = state_t::něco2

FUNKCE MAIN
ˇˇˇˇˇˇˇˇˇˇˇ
-je to normální funkce, musí něco vracet, automaticky sama returnuje 0
-tím začíná běh programu
-nejjednodušší verze bez parametrů
-dva možné parametry - počet vstupů int argc (velikost pole překladač nezjistí) 
                       a pole stringů char *argv[]

UKAZATELE
^ˇ^ˇ^ˇ^ˇ^
-jen zviditelnění situace, která se děje i v ostatních programovacích jazycích
-prý to není děsivé, ALE JE TO DĚSIVÉ
-celé bezznaménkové číslo, které říká adresu do paměti
-ví, na co ukazují, takže očekávají, že adrese je datový typ, na který ukazují
* - ukazatel, & - vzití adresy proměnné
int *pv = &v ...........vezmi adresu v a ulož ji do pv
- d-reference - unární hvězdička, musí za ní být ukazatel
*pv = 4 - vloží na místo, kam ukazuje pv, čtyřku
pv = 4 - vloží do pv čtyřku  
-můžeme udělat ukazatel na void 
^ překladač neví, na co se ukazuje, můžeme tam přiřazovat libovolný typ ukazatele
-velikost není fixovaná, je podle architektury počítače

-pointery a pole jsou to samé
int vals[] = {12,13}; - opravdu se někde sežene paměť té velikosti, nemůžu změnit
int *vals = {12,13}; - jen proměnná typu pointer, můžu tam dávat i jiné věci
 to pole vznikne, ale není pojmenované, přiřadím jinou hodnotu -> pole zmizí
-pole je ukazatel na začátek pole
-stringy fungují skoro stejně

-s pointery se dá počítat, ale je to nebezpečné (jestli už nesaháme někam mimo)
	str[i] je ekvivalentní *(str+i)
*(str+i) neznamená, že číslo se zvýší o jedna, 
  ale o velikost sizeofu typu, na který se ukazuje, takže třeba u int 4
	while (*str) { //jdu znak po znaku, poslední znak stringu je nula
	 blabla
	 ++str;
	}

-pointerové věci se čtou zprava

REFERENCE
ˇˇˇˇˇˇˇˇˇ
-zafixovaný pointer, nedá se s tím dělat aritmetika
int v = 8;
int &pv = v;   === int *pv = &v; akorát se s tím nedají dělat brigule
pv = 4; = přiřazuje na adresu, kam ukazuje pv

FUNKCE
ˇˇˇˇˇˇ
-parametry se předávají hodnotou, když volám, všechny parametry se okopírují
 vzniká nová lokální proměna toho jména
-pokud chci dostat ven funkční výstupní parametr, musím ji předávat ukazatelem
-v C++ se může předávat jako reference, když tam zapíšu uvnitř funkce, bude to vidět i venku

VELIKOSTI
~~~~~~~~~
-sizeof vrací velikost v bytech, pozor, ukazatel na pole nezná velikost pole

TŘÍDY
%%%%%
-v c++ jsou třídy a struktury to stejné až na viditelnost zvenku
-ale použití:
struktury - věci, co mají být zabalíčkované pohromadě
třídy - drží neviditelný stav objektu a nabízí to veřejné funkce, kterými můžu ten stav změnit
- v c++ je úplně jasný životní cyklus třídy
- konstruktor se volá při vzniku
- const píšu za funkci, pokud nemění věci v třídě
- destruktor ~class() volá se při zániku třídy
- při dosazení jinam se všechno kopíruje, v c# se kopíruje jen reference

