================================================================================
 S  O  U  B  O  R  Y
================================================================================

- jádro nerozumí obsahu souborů, jenom těm spustitelným
- většinou na disku
- identifikace jménem a cestou, adresáře se strukturou DAG
- převod z cesty a jména na číslo používané operačním systémem
- otevření souboru to udělá lokálně pro proces
- založí se datová struktura v procesu
- mají ukazovátko, kde se zrovna pracuje

CO S NIMI MŮŽEME DĚLAT
- otevření (musí už existovat) - blokující operace
- vytvořit, smazat, zkrátit, změnit atributy
- flush - zapsat změny na disk
- většina jsou blokovací
- mám ale i asynchronní
    - řeknu žádost, neblokuje se to, během čtení počítám dál

PŘÍSTUP
- rychlejší sekvenční
- pomalejší random access (databázové servery)

ADRESÁŘ/SLOŽKA/DIRECTORY
- množina souborů
- efektivita, pojmenovávní, seskupování
- speciální typ souboru
> KOŘENOVÝ adresář
    - první adresář, každý file system má svůj
- vytvářet, mazat, přejmenovat, manipulovat se soubory uvnitř
- hledání jména souboru, musí být rychlé
- vypsání obsahu

KDE MŮŽOU SOUBORY LEŽET
- čekáme, že jsou persistentní - většinou na disku
- pro dočasné, ale rychlé - na RAM
- síťové úložiště
- virtuální fle system  - abstrakce - /dev/random

FILE LINKS
- hard link
- soft link - tahle cesta je vlastně tahle cesta, spešl soubory symlink

FILE SYSTEM
1) jméno -> binární reprezentace
2) management disk bloků
3) které datové bloky a v jakém pořadí patří souboru
> lokální - na HDD, SDD
          - FAT, NTFS (windows), ext234 (linux), XFS
> síťové - NFS, SMB

FAT - file allocation table                                   !!!BUDE V TESTU!!!
- prastará věc z DOSu
- položky fixní délky, délka záznamu musí být násobek položky
- jsou tam prostě naházené položky, prochází se lineárně při hledání
- binární struktury se schovanou identifikací věcí prostě
- není tam chytrá datová struktura dovolující rychleji hledat
- ta tabulka je jediná datová struktura, kterou to má
  > mangement bloků, bloky souboru
- adresář: začáteční cluster, name+ext, velikost, timestamps, atributy
- root je fixní
- FAT je pole čísel prostě, původně 16bit

                FAT - vnější struktura
                ----------------------
                    ---------------
                    | boot record |
                     -------------
                    |    FAT1     |
                    |    FAT2     |  - přesná kopie FAT1
                     -------------
                    |    root     |
                     -------------
                    |    data     |

               FAT  - vnitřní struktura
               ------------------------
            2 [0 ]  3 [10]  4 [0 ]  5 [-1]      a.txt 13 -> 13, 8, 5
            6 [0 ]  7 [0 ]  8 [5 ]  9 [0 ]      b.txt 3  -> 3, 10, 15, 14
            10[15]  11[0 ]  12[0 ]  13[8 ]      0 ... volno, -1 ... konec
            14[-1]  15[14]  16[0 ]  17[0 ]      něco jiného ... odkaz na další


EXT2 - na linuxu
> inode 
  - index node - reprezentuje jeden soubor, adresář
  - většina atributů
  - stromeček
> adresář
  - sekvence záznamů s fixní strukturou, inode číslo
> block group:          -------------
    superblock         | info
    descriptor         | block 0 -> data block
    data bimap         | block 1 -> data block
    inode bitmap       |  ...
    inode table ------>| block 11
    data blocks        | block 12 (I) - ukazuje na inode o 128 data blocích
                       | block 13 (DI) - inode ukazující na 128 inodů ...
                       | block 14 (TI) - triple index
                        --------------

HARD DISK - A přece se točí...
- může být víc talířů, všechny sektory nad sebou - blok, kružnice - cluster
- hlavičky jsou nanometry od talířů
- nejmenší jednotka sektor
> přístupový čas
  - seek time - správná stopa - ms
  - rotational latency - čekání na správný sektor - průměrně 1/2 rychlosti
  - trasfer time - přenos dat, rychlé celkem
> algoritmy rychlého přístupu - dnes už je mají disky v sobě
  příklad: rýkvest - 82,170,43,61,24,16,190
           počáteční pozice - 50
  FCFS
  - kdo dřív přijde, ten dřív mele
  - při malé zátěži je nejlepší
  SHORTEST SEEK TIME FIRST
  - 50,43,61,82,24,16,170,190
  - pokud pořád přichází nové blízké, na vzdálené se nedostane
  SCAN - výtahový algoritmus
  - udržuje směr pohybu
  - 50,61,82,170,190,199,43,24,16,0
  - dobrý pro těžké vytížení systému, nejlepší obecně
  - modifikace - směr je vždy nahoru CSCAN - circular - lepší časy než SCAN
               - dvě fronty, nové do druhé atd atd
> file systemy na nich
  - partitioning - každá část vlastní klidně, na začátku struktura s přehledem
> RAID - redundant array of inexpensive discs
  - RAID 0 - dva disky, kombinace bloků - velmi rychlé, když umře, je to pryč
  - RAID 1 - dva disky, přesná kopie - záloha
  - RAID 5 - víc disků, jeden obětovaný na paritu 
           - dopočítají se hodnoty ztraceného disku

SSD
- nemá rotační věci, je to celé elektrické
- bloky ze stránek (page)
- čím víc bitů na jednotku, tím levnější na výrobu, tím pomalejší
- nejmenší jednotka page
- zápis nových dat ok
- mazání starých pouze na celý blok
  - přesune se zachovávané jinak, potom se smaže celý starý blok
- vydrží jenom určitý počet zápisů, časem se unaví, přesouvá se to na náhradní..
- komplikovaná režie, ale odolné na nárazy a o několik řádů rychlejší proti HDD












